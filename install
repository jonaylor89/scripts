#!/usr/bin/env bash

########################################################
#
# System configuration
# 
# Terminal           - Zsh
# 
# Zsh Theme          - Spaceship (Requires Nerd Font)
#
# Vim Plugin Manager - Vundle
#
########################################################

system_type=$(uname -s) 

case $system_type in
    "Darwin")
        printf "\n"
        printf "--------------------------------------------------\n"
        printf "=-=-=-=-=-= Mac System Installation =-=-=-=-=-=-=-\n"
        printf "--------------------------------------------------\n"
        printf "\n"
        # Modules for Mac
        ;;
    "Linux")
        printf "\n"
        printf "-------------------------------------------------\n"
        printf "=-=-=-=-=-= Linux System Installation =-=-=-=-=-=\n"
        printf "-------------------------------------------------\n"
        printf "\n" 
        # Modules for Linux
        ;;
    "*")
        # Modules for everything else
        ;;
esac


read -p '[+] tmux configs install? [Y/n] ' install_tmux
install_tmux=${install_tmux:-Y}
read -p '[+] vim configs install? [Y/n] ' install_vim
install_vim=${install_vim:-Y}
read -p '[+] zsh configs install? [Y/n] ' install_zsh
install_zsh=${install_zsh:-Y}
read -p '[+] alacritty configs install? [Y/n] ' install_alacritty
install_alacritty=${install_alacritty:-Y}
read -p '[+] X server configs install? [Y/n] ' install_X
install_X=${install_X:-Y}

if [[ $install_tmux != [nN] ]]
then
    if [ -f "$HOME/.tmux.conf" ]
    then
        printf "[*] File already exists on system (tmux.conf)\n"
    else
        printf "===> Linking tmux configurations\n"
        ln -s "$HOME/dotfiles/tmux/tmux.conf ~/.tmux.conf"
    fi
fi

if [[ $install_vim != [nN] ]]
then
    if [ -f ~/.vimrc ]
    then
        printf "[*] File already exists on system (vimrc)\n"
    else
        printf "===> Linking vim configurations\n"
        ln -s ~/dotfiles/vim/vimrc ~/.vimrc
    fi
fi

if [[ $install_zsh != [nN] ]]
then
    if [ -f ~/.zshrc ]
    then
        printf "[*] File already exists on system (zshrc)\n"
    else
        printf "===> Linking zsh configurations\n"
        ln -s ~/dotfiles/zsh/zshrc ~/.zshrc
    fi
fi

if [[ $install_alacritty != [nN] ]]
then
    if [ -f ~/.config/alacritty.yml ]
    then
        printf "[*] File already exists on system (alacritty.yml)\n"
    else
        printf "===> Linking alacritty configurations\n"
        ln -s ~/dotfiles/alacritty/alacritty.yml ~/.config/alacritty.yml
    fi
fi 

if [[ $install_X != [nN] ]]
then
    if [ -f ~/.Xresources ]
    then
        printf "[*] File already exists on system (Xresources)\n"
    else
        printf "===> Linking X server configurations\n"
        ln -s ~/dotfiles/X/Xresources ~/.Xresources
    fi
fi

# Download oh-my-zsh

if [ -d ~/.oh-my-zsh ] 
then
    printf "[*] oh-my-zsh already installed\n"
else
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
fi

# Download autosuggestions
if [ -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions ]
then
    printf "[*] zsh autosuggestion already installed\n"
else
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
fi

# Download syntex highlighting
if [ -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting ]
then
    printf "[*] zsh autosuggestion already installed\n"
else
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
fi

# Download and install shapship theme
if [ -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/spaceship-prompt ]
then
    printf "[*] zsh spaceship theme is already installed\n"
else
    git clone https://github.com/denysdovhan/spaceship-prompt.git "${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/spaceship-prompt"
    ln -s "$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme" "${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/spaceship.zsh-theme"
fi

# Download and install Vundle
if [ -d ~/.vim/bundle/Vundle.vim ]
then
    printf "[*] Vundle is already installed\n"
else
    git clone https://github.com/VundleVim/Vundle.vim.git  ~/.vim/bundle/Vundle.vim
fi

# Download and install a nerd font
if [[ $install_X != [nN] ]]
then
    FONT_INSTALLED=$(fc-list | grep -i "SauceCodePro Nerd Font Complete Mono")
    if [ -z "$FONT_INSTALLED" ]; then
        read -p "[+] The SauceCodePro Nerd Font Complete Mono font is not currently installed, would you like to install it now? (y/N) " response
        if [[ "$response" == [yY] ]]; then
            printf "[*] Installing the SauceCodePro Nerd FontComplete Mono font to the ~/.fonts directory...\n"
            git clone https://github.com/ryanoasis/nerd-fonts.git
            ./nerd-fonts/install.sh 'SauceCodePro Nerd Font Complete Mono'
            rm -rf nerd-fonts
            FONT_INSTALLED=$(fc-list | grep -i "SauceCodePro Nerd Font Complete Mono");
            if [ -n "$FONT_INSTALLED" ]; then
                printf "[*] The SauceCodePro Nerd Font Complete Mono font was sucessfully installed!\n"
            else
                printf "[*] Something went wrong while trying to install the SauceCodePro Nerd Font Mono font.\n"
            fi
        else
            printf "[*] Skipping the installation of the SauceCodePro Nerd Font Complete Mono font...\n"
            printf "[*] Please note that this configuration will not work without a nerd font.\n"
        fi
    else
        printf "[*] The SauceCodePro Nerd Font Complete Mono font has already been installed.\n"
    fi
else
    printf "[*] Skipping the installation of the SauceCodePro Nerd Font Complete Mono font...\n"
    printf "[*] Please note that this configuration will not work without a nerd font.\n"
fi

# Download and install Tmux theme
if [ -d ~/.tmux-themepack ]
then
    printf "[*] tmux themepack already installed\n"
else
    git clone https://github.com/jimeh/tmux-themepack.git ~/.tmux-themepack
    source "${HOME}/.tmux-themepack/powerline/block/blue.tmuxtheme"
fi

# Create projects directory
if [ -d $HOME/Repos ] 
then
    printf "[*] Repos directory already exists!\n"
else
    printf "[*] Creating 'Repos' directory\n"
    mkdir $HOME/Repos
fi

if [ -d $HOME/bin ]
then
    printf "[*] Home bin directory already exits!\n"
else
    printf "[*] Creating 'bin' directory\n"
    mkdir $HOME/bin
fi

printf "[*] Adding scripts and binaries\n"

ln -s $HOME/dotfiles/update_git_repos $HOME/bin/update_git_repos

if [ -f $HOME/bin/install ]
then
    printf "[*] File already exists on system (~/bin/install)\n"
else
    printf "===> Linking installation file\n"
    ln -s $HOME/dotfiles/install $HOME/bin/install
fi

if [ -f $HOME/dotfiles/update_git_repos ]
then
    printf "[*] File already exists on system (~/bin/update_git_repos)\n"
else
    printf "===> Linking repository updaing script\n"
    ln -s $HOME/dotfiles/update_git_repos $HOME/bin/update_git_repos
fi

# Change to zsh
chsh $(whoami) -s $(which zsh)
source $HOME/.zshrc 

ssh-keygen -t rsa -C "jonaylor89@gmail.com" -b 4096

printf "[*] \x1b[32mConfiguration complete\x1b[m\n"





